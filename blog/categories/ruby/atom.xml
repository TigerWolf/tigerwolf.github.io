<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Kierans Blog]]></title>
  <link href="http://TigerWolf.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://TigerWolf.github.io/"/>
  <updated>2014-09-23T22:06:47+09:30</updated>
  <id>http://TigerWolf.github.io/</id>
  <author>
    <name><![CDATA[Kieran]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby Constants]]></title>
    <link href="http://TigerWolf.github.io/2014/01/fun-with-ruby-constants/"/>
    <updated>2014-01-28T00:00:00+10:30</updated>
    <id>http://TigerWolf.github.io/2014/01/fun-with-ruby-constants</id>
    <content type="html"><![CDATA[<p>I was doing some refactoring recently and made some interesting discoveries about how constants work in ruby.</p>

<p>What tripped me up was how much of a mess this code made:</p>

<pre name="code" class="ruby">module Greetings
  COMMON_GREETINGS = { "hello" => "Hello!", "goodbye" => "Good bye." }
end

class Greetings::Welcome
  GREETINGS = COMMON_GREETINGS.merge! { "welcome" => "Welcome" }
end

class Greetings::Christmas
  GREETINGS = COMMON_GREETINGS.merge! { "hoho" => "Ho Ho, Merry Christmas" }
end
</pre>


<p>Can you spot the problems here? The first obvious one is merge with a bang, and the other I will explain below.</p>

<p><strong>What is a constant?</strong></p>

<p>Constants in ruby are anything starting with a capital letter. So class names are constants as well as all capital variables.</p>

<pre name="code" class="ruby">MAX_EXECUTION_TIME = "60"</pre>


<p>Constants aren&#8217;t completely similar in other language. For example in Java and PHP you cannot re-assign or change a constant. In ruby you can:</p>

<pre name="code" class="ruby">2.0.0-p353 :001 > GREETING = "hello"
 => "hello" 
2.0.0-p353 :002 > GREETING = "goodbye"
(irb):2: warning: already initialized constant GREETING
(irb):1: warning: previous definition of GREETING was here
 => "goodbye" 
2.0.0-p353 :003 > GREETING
 => "goodbye" 
</pre>


<p>Now you do get a warning, but its not an error and will not stop you from continuing. In the first example, the merge! actually modified the original constant so this was applied too all other classes using this constant.</p>

<p>There is one thing you can do if you want to ensure that the Object that the constant holds will not be modified, and that is by using the method freeze.</p>

<p><a href="http://ruby-doc.org/core-2.1.0/Object.html#method-i-freeze">http://ruby-doc.org/core-2.1.0/Object.html#method-i-freeze</a></p>

<pre name="code" class="ruby">2.0.0-p353 :001 > GREETING = "goodbye"
 => "goodbye" 
2.0.0-p353 :002 > GREETING.freeze
 => "goodbye" 
2.0.0-p353 :003 > GREETING &lt;&lt; " and hello"
RuntimeError: can't modify frozen String
    from (irb):3
    from /home/kieran/.rvm/rubies/ruby-2.0.0-p353/bin/irb:12:in `&lt;main>'
</pre>


<p>But as you can see below, the Constant is still able to be re-assigned (but still gives us the warning).</p>

<pre name="code" class="ruby">2.0.0-p353 :004 > GREETING = "goodbye and hello"
(irb):4: warning: already initialized constant GREETING
(irb):1: warning: previous definition of GREETING was here
 => "goodbye and hello" 
</pre>


<p>As pointed out by Andrew, you can freeze the class constant that an object refers to which will stop it from being modified.</p>

<pre name="code" class="ruby">class Foo
BAR = 1
end

# Works
class Foo
BAR = 2
end

Foo.freeze

# Doesn’t work
class Foo
BAR = 3
end
</pre>


<p>Some other useful things about class constants is how easily they can be accessed. Constants defined in a class can even be reached without creating an instance of the class. You can even dynamically call the constant if you have a reference to the Class variable that contains the constant. For example:</p>

<pre name="code" class="ruby">irb(main):005:0> class Work
irb(main):006:1> JOB = "Gardening"
irb(main):007:1> end
=> "Gardening"
irb(main):008:0> work = Work
=> Work
irb(main):009:0> work::JOB 
=> "Gardening"
</pre>


<p>Im still not certain on how useful constants are for settings that never change but I prefer using them to class methods that re-define hashes every time they are called or yaml files. They can sometimes make testing easier and other times harder.</p>

<p>Do you use constants much and how do you use them? Reply in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Startup Weekend in Adelaide]]></title>
    <link href="http://TigerWolf.github.io/2012/12/startup-weekend-adelaide-my-experiences/"/>
    <updated>2012-12-14T00:00:00+10:30</updated>
    <id>http://TigerWolf.github.io/2012/12/startup-weekend-adelaide-my-experiences</id>
    <content type="html"><![CDATA[<p>I recently attended <a href="http://adelaide.startupweekend.org/">startup weekend in Adelaide</a>. I was really excited because it would be a good opportunity to build something and test my new skills I had learn recently <a href="http://tryruby.org/levels/1/challenges/0">programming ruby</a> (and using rails).</p>

<p>The weekend started on Friday night where attendees had the chance to pitch their ideas in a quick 1 minute pitch. There where some exciting ones. The ones that stood out for me was a pitch about a rating system for health care professionals , a iPhone app to find and rate pubic toilets and a coffee rating app.</p>

<p>I decided to join the team doing rating and listing of health care as I though this would be really useful for lot of people if it was successful and seemed like something I could help and build a great MVP.</p>

<p>On the Saturday, after having formed our team on the Friday night, we where all ready to go. We had a really large group which became quite hard to manage at the start, we decided to break the group up into technology (MVP) and business so we would all.</p>

<p>In creating the initial product and setting up a starting point I made a few mistakes with setting up my project. Something that I found really useful and saved me a lot of trouble, was a ruby gem called <a href="https://github.com/RailsApps/rails-composer">Composer</a>. It gets a project up and running really quickly by asking you a series of questions of things that you might want to add to your project, like <a href="https://github.com/plataformatec/devise">Devise</a> for auth and <a href="http://twitter.github.com/bootstrap/">Twitter bootstrap</a>.</p>

<p>Wanting to get something up and running really quickly, Luke in our group recommended Heroku. I had never used it before but wanted to give it a go. I was really impressed! All you need to go is install the Heroku gem on your computer, run heroku init on the project and then type git push heroku and it is deployed in a matter of minutes! It runs bundle and install all of the gems in the gemfile and then spins up a server.</p>

<p>One of the elements of the weekend that I really enjoyed was the mentors  that came to each group and provided insight into the various aspects of our project and how we could improve. This was really interesting to hear.</p>

<p>I made quite a bit of progress with the app and by the end I was able to make a simple way to lookup a directory of health care professionals. We used the app in our pitch at the end of the weekend. The other pitches where really good to watch and to see what all of the other teams had come up with over the weekend.</p>
]]></content>
  </entry>
  
</feed>
